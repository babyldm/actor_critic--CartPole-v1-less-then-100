import tensorflow as tf
from tensorflow.contrib.distributions import Normal
import numpy as np
import matplotlib.pyplot as plt
import gym, threading, queue
import pandas as pd
import os
EP_MAX = 40000
EP_LEN = 24
N_WORKER = 8  # parallel workers几个程序并行学习
GAMMA = 0.96  # reward discount factor奖励衰减度
A_LR = 0.000001  # learning rate for actor 演员学习率
C_LR = 0.00001  # learning rate for critic评论家学习率
MIN_BATCH_SIZE = 64  # minimum batch size for updating PPO最小学习步长
UPDATE_STEP = 4  # loop update operation n-steps多少步更新一次
EPSILON = 0.2  # for clipping surrogate objective 探索率递减率
GAME = 'Pendulum-v0'
S_DIM, A_DIM = 4, 1  # state and action dimension 状态个数，动作个数
class StochasticMDPEnv:#np.sin(3 * x) + x / 3 + np.cos(2 * x) as  price  cos as volume
    def __init__(self):
        self.x = 0
        self.money_up_10=False
    def funct(self,x):
        return np.sin(3 * x) + x / 3 + np.cos(2 * x)
    def reset(self):
        self.x=0
        self.wr=0
        return np.array([self.funct(self.x-np.pi/6),self.funct(self.x),self.funct(self.x+np.pi/6),self.wr] )
    def step(self, action):
        self.x+=np.pi/6
        self.m_reword =(self.funct(self.x + np.pi / 6) - self.funct(self.x)) * action*10#+2)/4
        self.wr+=self.m_reword
        return np.array( [self.funct(self.x-np.pi/6),self.funct(self.x),self.funct(self.x+np.pi/6),self.wr] ),self.m_reword ,self.money_up_10 #self.m_reword
class PPO(object):
    def __init__(self):# 建 Actor Critic 网络,搭计算图纸 graph
        self.sess = tf.Session()#神经病网络开始了
        self.tfs = tf.placeholder(tf.float32, [None, S_DIM], 'state')#确定输入维数及状态位数格式[None,s_DIM]
        # critic
       #----------------------------------------------
        cell_size = 100  #神经元数
        s = tf.expand_dims(self.tfs, axis=1, name='timely_input')#将输入扩展到[1,S_DIM]
        rnn_cell = tf.contrib.rnn.BasicLSTMCell(cell_size, state_is_tuple=False)#建立100个神经元的LSTM
        self.init_state = rnn_cell.zero_state(batch_size=1, dtype=tf.float32)#初始化权重为0
        outputs, self.final_state = tf.nn.dynamic_rnn(cell=rnn_cell, inputs=s, initial_state=self.init_state,time_major=True)#dynamic_rnn输出
        cell_out = tf.reshape(outputs, [-1, cell_size], name='flatten_rnn_outputs')#将输出定规范到适合下一层神经网络
        l1 = tf.layers.dense(cell_out , 100, tf.nn.relu)#建立层输入为LSTM的输出.
        #-----------------------------------------------------
        #l1 = tf.layers.dense(self.tfs, 100, tf.nn.relu)
        self.v = tf.layers.dense(l1, 1)#输出为1
        self.tfdc_r = tf.placeholder(tf.float32, [None, 1], 'discounted_r')#hoder一下输入
        self.advantage = self.tfdc_r - self.v #discounted reward - Critic 出来的 state value
        self.closs = tf.reduce_mean(tf.square(self.advantage))#均方差
        self.ctrain_op = tf.train.AdamOptimizer(C_LR).minimize(self.closs)#均方差最小
        # actor
        pi, pi_params = self._build_anet('pi', trainable=True)#pi就是ACTOR
        oldpi, oldpi_params = self._build_anet('oldpi', trainable=False)
        self.sample_op = tf.squeeze(pi.sample(1), axis=0)  # choosing action
        self.update_oldpi_op = [oldp.assign(p) for p, oldp in zip(pi_params, oldpi_params)]
        self.tfa = tf.placeholder(tf.float32, [None, A_DIM], 'action')
        self.tfadv = tf.placeholder(tf.float32, [None, 1], 'advantage')
        # ratio = tf.exp(pi.log_prob(self.tfa) - oldpi.log_prob(self.tfa))
        ratio = pi.prob(self.tfa) / (oldpi.prob(self.tfa) + 1e-5)
        surr = ratio * self.tfadv  # surrogate loss
        self.aloss = -tf.reduce_mean(tf.minimum(surr,tf.clip_by_value(ratio, 1. - EPSILON, 1. + EPSILON) * self.tfadv))
        self.atrain_op = tf.train.AdamOptimizer(A_LR).minimize(self.aloss)
        self.sess.run(tf.global_variables_initializer())
    def update(self):# 更新 PPO
        global GLOBAL_UPDATE_COUNTER
        while not COORD.should_stop():
            if GLOBAL_EP < EP_MAX:
                UPDATE_EVENT.wait()  # wait until get batch of data
                self.sess.run(self.update_oldpi_op)  # old pi to pi
                data = [QUEUE.get() for _ in range(QUEUE.qsize())]
                data = np.vstack(data)
                s, a, r = data[:, :S_DIM], data[:, S_DIM: S_DIM + A_DIM], data[:, -1:]
                adv = self.sess.run(self.advantage, {self.tfs: s, self.tfdc_r: r})
                [self.sess.run(self.atrain_op, {self.tfs: s, self.tfa: a, self.tfadv: adv}) for _ in range(UPDATE_STEP)]
                [self.sess.run(self.ctrain_op, {self.tfs: s, self.tfdc_r: r}) for _ in range(UPDATE_STEP)]
                UPDATE_EVENT.clear()  # updating finished
                GLOBAL_UPDATE_COUNTER = 0  # reset counter
                ROLLING_EVENT.set()  # set roll-out available
    def _build_anet(self, name, trainable):
        with tf.variable_scope(name):
            # ----------------------------------------------
            cell_size = 200
            s = tf.expand_dims(self.tfs, axis=1, name='timely_input')
            rnn_cell = tf.contrib.rnn.BasicLSTMCell(cell_size, state_is_tuple=False)
            self.init_state = rnn_cell.zero_state(batch_size=1, dtype=tf.float32)
            outputs, self.final_state = tf.nn.dynamic_rnn(cell=rnn_cell, inputs=s, initial_state=self.init_state,time_major=True)
            cell_out = tf.reshape(outputs, [-1, cell_size], name='flatten_rnn_outputs')
            l1 = tf.layers.dense(cell_out, 200, tf.nn.relu, trainable=trainable)
            # -----------------------------------------------------
            #l1 = tf.layers.dense(self.tfs, 200, tf.nn.relu, trainable=trainable)
            mu = 2 * tf.layers.dense(l1, A_DIM, tf.nn.tanh, trainable=trainable)
            sigma = tf.layers.dense(l1, A_DIM, tf.nn.softplus, trainable=trainable)
            norm_dist = Normal(loc=mu, scale=sigma)
        params = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name)
        return norm_dist, params
    def choose_action(self, s):# 选动作
        s = s[np.newaxis, :]
        a = self.sess.run(self.sample_op, {self.tfs: s})[0]
        return np.clip(a, 0, 1)
    def get_v(self, s):# 算 state value
        if s.ndim < 2: s = s[np.newaxis, :]
        return self.sess.run(self.v, {self.tfs: s})[0, 0]
class Worker(object):
    def __init__(self, wid):
        self.wid = wid
        self.env = StochasticMDPEnv()#gym.make(GAME).unwrapped
        self.ppo = GLOBAL_PPO
    def work(self):
        global GLOBAL_EP, GLOBAL_RUNNING_R, GLOBAL_UPDATE_COUNTER
        while not COORD.should_stop():
            s = self.env.reset()
            ep_r = 0
            buffer_s, buffer_a, buffer_r = [], [], []
            for t in range(EP_LEN):
                if not ROLLING_EVENT.is_set():  # while global PPO is updating
                    ROLLING_EVENT.wait()  # wait until PPO is updated
                    buffer_s, buffer_a, buffer_r = [], [], []  # clear history buffer, use new policy to collect data
                a = self.ppo.choose_action(s)
                s_, r, done= self.env.step(a)
                buffer_s.append(s)
                buffer_a.append(a)
                buffer_r.append(r)#((r + 8) / 8)  # normalize reward, find to be useful
                s = s_
                ep_r += r
                GLOBAL_UPDATE_COUNTER += 1  # count to minimum batch size, no need to wait other workers
                if t == EP_LEN - 1 or GLOBAL_UPDATE_COUNTER >= MIN_BATCH_SIZE:# 如果 buffer 收集一个 batch 了或者 episode 完了
                    v_s_ = self.ppo.get_v(s_)# 计算 discounted reward
                    discounted_r = []  # compute discounted reward
                    for r in buffer_r[::-1]:
                        v_s_ = r + GAMMA * v_s_
                        discounted_r.append(v_s_)
                    discounted_r.reverse()
                    bs, ba, br = np.vstack(buffer_s), np.vstack(buffer_a), np.array(discounted_r)#[:, np.newaxis]
                    buffer_s, buffer_a, buffer_r = [], [], []# 清空 buffer
                    QUEUE.put(np.hstack((bs, ba, br)))
                    if GLOBAL_UPDATE_COUNTER >= MIN_BATCH_SIZE:
                        ROLLING_EVENT.clear()  # stop collecting data
                        UPDATE_EVENT.set()  # globalPPO update
                    if GLOBAL_EP >= EP_MAX:  # stop training
                        COORD.request_stop()
                        break
            # record reward changes, plot later
            if len(GLOBAL_RUNNING_R) == 0:
                GLOBAL_RUNNING_R.append(ep_r)
            else:
                GLOBAL_RUNNING_R.append(GLOBAL_RUNNING_R[-1] * 0.9 + ep_r * 0.1)
            GLOBAL_EP += 1
            print('{0:.1f}%'.format(GLOBAL_EP / EP_MAX * 100), '|W%i' % self.wid, '|Ep_r: %.2f' % ep_r, )
if __name__ == '__main__':
    GLOBAL_PPO = PPO()
    UPDATE_EVENT, ROLLING_EVENT = threading.Event(), threading.Event()
    UPDATE_EVENT.clear()  # no update now
    ROLLING_EVENT.set()  # start to roll out
    workers = [Worker(wid=i) for i in range(N_WORKER)]
    GLOBAL_UPDATE_COUNTER, GLOBAL_EP = 0, 0
    GLOBAL_RUNNING_R = []
    COORD = tf.train.Coordinator()
    QUEUE = queue.Queue()
    threads = []
    saver = tf.train.Saver()
    try:
        ckpt = tf.train.get_checkpoint_state(os.path.dirname('./best_model'))
        saver.restore(GLOBAL_PPO.sess, ckpt.model_checkpoint_path)
    except:
        pass
    for worker in workers:  # worker threads
        t = threading.Thread(target=worker.work, args=())
        t.start()
        threads.append(t)
    # add a PPO updating thread
    threads.append(threading.Thread(target=GLOBAL_PPO.update, ))
    threads[-1].start()
    COORD.join(threads)
    saver.save(GLOBAL_PPO.sess, "./best_model")
    recrod=pd.DataFrame(columns=["state","reword","action"])
    env = StochasticMDPEnv()
    s = env.reset()
    for t in range(24):
        t=s
        action=GLOBAL_PPO.choose_action(s)
        s, r, done= env.step(action)
        recrod.loc[len(recrod)] = [s[1], r[0],action[0]]
    recrod.to_csv('C:\\Users\\BABY\\Desktop\\get.csv')
    # plot reward change and testing
    plt.plot(np.arange(len(GLOBAL_RUNNING_R)), GLOBAL_RUNNING_R)
    plt.xlabel('Episode');
    plt.ylabel('Moving reward');
    plt.ion();
    plt.show()
